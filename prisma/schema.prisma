// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id           Int             @id @default(autoincrement())
  name         String
  username     String
  password     String
  email        String
  phoneNumber  String
  reviews      PatientReview[]
  appointments Appointment[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model PatientReview {
  id             Int      @id @default(autoincrement())
  reviewedDoctor Doctor   @relation(fields: [doctorId], references: [id])
  doctorId       Int
  reviewWriter   Patient  @relation(fields: [patientId], references: [id])
  patientId      Int
  review         String
  rating         Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Location {
  id          Int      @id @default(autoincrement())
  doctor      Doctor?
  street      String
  city        String
  governorate String
  lat         Decimal?
  lng         Decimal?
}

model Doctor {
  id                Int             @id @default(autoincrement())
  name              String
  username          String
  password          String
  email             String
  phoneNumber       String
  specialization    String
  subSpecialization String
  price1            Float?
  price2            Float?
  appointments      Appointment[]
  reviews           PatientReview[]
  location          Location        @relation(fields: [locationId], references: [id])
  locationId        Int             @unique
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Moderator {
  id          Int      @id @default(autoincrement())
  username    String
  email       String
  password    String
  permissions String[]
}

model Prescription {
  id          Int          @id @default(autoincrement())
  appointment Appointment?
  prognosis   String
  dosage      String
  notes       String
  date        DateTime     @default(now())
}

model Appointment {
  id             Int           @id @default(autoincrement())
  doctor         Doctor        @relation(fields: [doctorId], references: [id])
  patient        Patient       @relation(fields: [patientId], references: [id])
  patientId      Int
  doctorId       Int
  type           String
  at             DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  appointment    Prescription? @relation(fields: [prescriptionId], references: [id])
  prescriptionId Int?          @unique
}
